name: Update Ruff Implementation Cache

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get current cache hash
        id: current-hash
        run: |
          if [ -f src/pylint_ruff_sync/data/ruff_implemented_rules.json ]; then
            echo "hash=$(sha256sum src/pylint_ruff_sync/data/ruff_implemented_rules.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "hash=none" >> $GITHUB_OUTPUT
          fi

      - name: Update cache
        run: |
          uv run python -m pylint_ruff_sync --update-cache --cache-path src/pylint_ruff_sync/data/ruff_implemented_rules.json

      - name: Add timestamp to cache
        run: |
          python -c "
          import json
          from datetime import datetime, timezone
          from pathlib import Path

          cache_file = Path('src/pylint_ruff_sync/data/ruff_implemented_rules.json')
          if cache_file.exists():
              with cache_file.open('r') as f:
                  data = json.load(f)
              data['last_updated'] = datetime.now(timezone.utc).isoformat()
              with cache_file.open('w') as f:
                  json.dump(data, f, indent=2, sort_keys=True)
                  f.write('\n')  # Ensure trailing newline
          "

      - name: Get new cache hash
        id: new-hash
        run: |
          echo "hash=$(sha256sum src/pylint_ruff_sync/data/ruff_implemented_rules.json | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Check for changes
        id: changes
        run: |
          if [ "${{ steps.current-hash.outputs.hash }}" != "${{ steps.new-hash.outputs.hash }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Cache has changed, will create release"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected in cache"
          fi

      - name: Get rule count
        id: rule-count
        if: steps.changes.outputs.changed == 'true'
        run: |
          count=$(python -c "
          import json
          with open('src/pylint_ruff_sync/data/ruff_implemented_rules.json') as f:
              data = json.load(f)
              print(len(data['implemented_rules']))
          ")
          echo "count=$count" >> $GITHUB_OUTPUT

      - name: Configure git
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes
        if: steps.changes.outputs.changed == 'true'
        run: |
          git add src/pylint_ruff_sync/data/ruff_implemented_rules.json
          git commit -m "Update ruff implementation cache

          - Updated with ${{ steps.rule-count.outputs.count }} implemented rules
          - Cache updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Source: https://github.com/astral-sh/ruff/issues/970" || echo "No changes to commit"

      - name: Push changes
        if: steps.changes.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Generate release notes
        id: release-notes
        if: steps.changes.outputs.changed == 'true'
        run: |
          # Get the current UTC timestamp
          CACHE_UPDATED_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")

          cat > release_notes.md << EOF
          ## Ruff Implementation Cache Update

          This release contains an updated cache of pylint rules implemented in Ruff.

          **Statistics:**
          - Total implemented rules: ${{ steps.rule-count.outputs.count }}
          - Cache updated: ${CACHE_UPDATED_TIME}
          - Source: https://github.com/astral-sh/ruff/issues/970

          **What's Changed:**
          - Updated ruff implementation data from upstream GitHub issue
          - Cache file: \`src/pylint_ruff_sync/data/ruff_implemented_rules.json\`

          This update ensures that the tool works correctly in offline environments like precommit.ci.
          EOF

          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get version for release
        id: version
        if: steps.changes.outputs.changed == 'true'
        run: |
          # Generate version in YY.MM.DD.HHMM format
          version="$(date +%y.%m.%d.%H%M)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.changes.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Cache Update ${{ steps.version.outputs.version }}"
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: No changes detected
        if: steps.changes.outputs.changed == 'false'
        run: |
          echo "No changes detected in ruff implementation cache"
          echo "Current cache is up to date with ${{ steps.rule-count.outputs.count || 'unknown' }} rules"
