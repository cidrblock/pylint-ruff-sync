name: Update Ruff Implementation Cache

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Update cache and get summary
        id: update-cache
        run: |
          # Run the tool and capture its output
          output=$(uv run python -m pylint_ruff_sync --update-cache --cache-path src/pylint_ruff_sync/data/ruff_implemented_rules.json 2>&1)
          echo "$output"

          # Extract the JSON summary from the output
          json_start=$(echo "$output" | grep -n "=== CACHE_UPDATE_RESULT ===" | cut -d: -f1)
          json_end=$(echo "$output" | grep -n "=== END_CACHE_UPDATE_RESULT ===" | cut -d: -f1)

          if [ -n "$json_start" ] && [ -n "$json_end" ]; then
            json_start=$((json_start + 1))
            json_end=$((json_end - 1))
            json_content=$(echo "$output" | sed -n "${json_start},${json_end}p")

            # Parse JSON and set outputs
            echo "has_changes=$(echo "$json_content" | python3 -c 'import json, sys; data=json.load(sys.stdin); print(str(data["has_changes"]).lower())')" >> $GITHUB_OUTPUT
            echo "added_count=$(echo "$json_content" | python3 -c 'import json, sys; data=json.load(sys.stdin); print(data["added_count"])')" >> $GITHUB_OUTPUT
            echo "removed_count=$(echo "$json_content" | python3 -c 'import json, sys; data=json.load(sys.stdin); print(data["removed_count"])')" >> $GITHUB_OUTPUT
            echo "total_rules=$(echo "$json_content" | python3 -c 'import json, sys; data=json.load(sys.stdin); print(data["total_rules"])')" >> $GITHUB_OUTPUT

            # Save release notes to file
            echo "$json_content" | python3 -c 'import json, sys; data=json.load(sys.stdin); print(data["release_notes"])' > release_notes.md

            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Failed to extract JSON summary from tool output"
            exit 1
          fi

      - name: Configure git
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git add src/pylint_ruff_sync/data/ruff_implemented_rules.json
          git commit -m "Update ruff implementation cache

          - Rules added: +${{ steps.update-cache.outputs.added_count }}
          - Rules removed: -${{ steps.update-cache.outputs.removed_count }}
          - Total rules: ${{ steps.update-cache.outputs.total_rules }}
          - Source: https://github.com/astral-sh/ruff/issues/970" || echo "No changes to commit"

      - name: Push changes
        if: steps.update-cache.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Get version for release
        id: version
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          # Generate version in YY.MM.DD.HHMM format
          version="$(date +%y.%m.%d.%H%M)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.update-cache.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Cache Update ${{ steps.version.outputs.version }}"
          body: ${{ steps.update-cache.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: No changes detected
        if: steps.update-cache.outputs.has_changes == 'false'
        run: |
          echo "No changes detected in ruff implementation cache"
          echo "Current cache is up to date with ${{ steps.update-cache.outputs.total_rules }} rules"
