name: Update Ruff Implementation Cache

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Update cache and get summary
        id: update-cache
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run the tool once and capture both output and JSON
          uv run python -m pylint_ruff_sync --update-cache --cache-path src/pylint_ruff_sync/data/ruff_implemented_rules.json | tee /dev/stderr > cache_result.json

          # Parse JSON and set outputs using jq
          echo "has_changes=$(jq -r '.has_changes' cache_result.json)" >> $GITHUB_OUTPUT
          echo "total_rules=$(jq -r '.total_rules' cache_result.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r '.version' cache_result.json)" >> $GITHUB_OUTPUT

          # Save release notes and commit message using jq
          jq -r '.release_notes' cache_result.json > release_notes.md
          jq -r '.commit_message' cache_result.json > commit_message.txt

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          cat commit_message.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Clean up temp file
          rm cache_result.json

      - name: Configure git
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git add src/pylint_ruff_sync/data/ruff_implemented_rules.json
          git commit -m "${{ steps.update-cache.outputs.commit_message }}" || echo "No changes to commit"

      - name: Push changes
        if: steps.update-cache.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Create Release
        if: steps.update-cache.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.update-cache.outputs.version }}" \
            --title "Cache Update ${{ steps.update-cache.outputs.version }}" \
            --notes "${{ steps.update-cache.outputs.release_notes }}"

      - name: No changes detected
        if: steps.update-cache.outputs.has_changes == 'false'
        run: |
          echo "No changes detected in ruff implementation cache"
          echo "Current cache is up to date with ${{ steps.update-cache.outputs.total_rules }} rules"
