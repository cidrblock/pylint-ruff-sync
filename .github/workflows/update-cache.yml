name: Update Ruff Implementation Cache

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write

jobs:
  update-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: |
          uv sync --all-extras

      - name: Update cache and get summary
        id: update-cache
        run: |
          # Run the tool and capture its output
          output=$(uv run python -m pylint_ruff_sync --update-cache --cache-path src/pylint_ruff_sync/data/ruff_implemented_rules.json 2>&1)
          echo "$output"

          # Extract the JSON from the last line of stdout (excluding stderr logs)
          json_output=$(uv run python -m pylint_ruff_sync --update-cache --cache-path src/pylint_ruff_sync/data/ruff_implemented_rules.json 2>/dev/null)

          # Parse JSON and set outputs using jq
          echo "has_changes=$(echo "$json_output" | jq -r '.has_changes')" >> $GITHUB_OUTPUT
          echo "total_rules=$(echo "$json_output" | jq -r '.total_rules')" >> $GITHUB_OUTPUT

          # Save release notes and commit message
          echo "$json_output" | jq -r '.release_notes' > release_notes.md
          echo "$json_output" | jq -r '.commit_message' > commit_message.txt

          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "commit_message<<EOF" >> $GITHUB_OUTPUT
          cat commit_message.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Configure git
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit changes
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          git add src/pylint_ruff_sync/data/ruff_implemented_rules.json
          git commit -m "${{ steps.update-cache.outputs.commit_message }}" || echo "No changes to commit"

      - name: Push changes
        if: steps.update-cache.outputs.has_changes == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Get version for release
        id: version
        if: steps.update-cache.outputs.has_changes == 'true'
        run: |
          # Generate version in YY.MM.DD.HHMM format
          version="$(date +%y.%m.%d.%H%M)"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.update-cache.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: "Cache Update ${{ steps.version.outputs.version }}"
          body: ${{ steps.update-cache.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: No changes detected
        if: steps.update-cache.outputs.has_changes == 'false'
        run: |
          echo "No changes detected in ruff implementation cache"
          echo "Current cache is up to date with ${{ steps.update-cache.outputs.total_rules }} rules"
